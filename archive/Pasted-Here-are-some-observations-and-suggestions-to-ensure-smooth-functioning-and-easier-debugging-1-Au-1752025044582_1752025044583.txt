Here are some observations and suggestions to ensure smooth functioning and easier debugging:

1. Auth Loading Handling
You already have a nice pattern to show a loading spinner briefly while auth status is resolving:

jsx
Copy
Edit
if (isLoading && !showApp) {
  return (
    <div className="min-h-screen flex items-center justify-center">
      <div className="text-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-teal-500 mx-auto"></div>
        <p className="text-gray-400 mt-4">Loading...</p>
      </div>
    </div>
  );
}
This prevents flickering or 404 errors during startup. Nice!

2. Route Guarding
You separate unauthenticated routes (/login, /simple-login, /landing, etc.) from authenticated routes (/, /discover, /activity, etc.) based on isAuthenticated.

You might want to consider redirecting unauthenticated users who try to access protected routes back to /login or /landing for a better UX.

For example, inside your Router, if !isAuthenticated and route is protected, redirect to login.

Example:

jsx
Copy
Edit
import { Redirect } from "wouter";

...

{!isAuthenticated ? (
  <Switch>
    <Route path="/login" component={Login} />
    <Route path="/simple-login" component={SimpleLogin} />
    <Route path="/landing" component={Landing} />
    <Route path="*">
      <Redirect to="/login" />
    </Route>
  </Switch>
) : (
  // Authenticated routes here
)}
3. 404 Handling
You currently have a fallback <Route component={NotFound} /> at the bottom of the <Switch>. This will catch any unmatched paths — good!

4. Mobile vs Desktop UI
You conditionally show MobileNav and (commented) DesktopFooter based on isAuthenticated and device.

If you want to add the desktop footer back, you might want to detect desktop and render accordingly.

Your isMobileDevice import is not currently used — consider using it for this:

jsx
Copy
Edit
{isAuthenticated && !isMobileDevice() && <DesktopFooter />}
5. Unhandled Promise Rejection Handling
You’re listening for unhandledrejection events globally and silently logging them. This is useful but be sure you handle promise errors in your fetch/query calls as well to avoid silent bugs.

6. Toast & Tooltip Providers
Good that you wrap everything in your UI providers, including QueryClientProvider.

7. Debugging Tips
To debug route problems, you can log the current path with useLocation from wouter:

jsx
Copy
Edit
import { useLocation } from "wouter";

function Router() {
  const [location] = useLocation();
  console.log("Current path:", location);
  ...
}
Also add error boundaries or React Query Devtools to catch unexpected issues.

Summary
Your setup looks solid and idiomatic for React + Wouter + React Query. Consider adding route redirects for auth guarding, and use useLocation + logs for debugging route issues.

If you want, I can help write a small redirect wrapper component or add React Query Devtools for you!