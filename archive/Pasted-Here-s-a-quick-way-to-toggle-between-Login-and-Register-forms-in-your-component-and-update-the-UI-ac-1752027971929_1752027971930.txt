Here’s a quick way to toggle between Login and Register forms in your component and update the UI accordingly — so users can actually create an account from this page:

Add toggle UI and conditional forms:
Replace your current form rendering with conditional rendering based on isLogin:

tsx
Copy
Edit
{/* Toggle between Login and Register */}
<div className="flex justify-center mb-6 space-x-4">
  <button
    onClick={() => setIsLogin(true)}
    className={`px-4 py-2 font-semibold rounded ${
      isLogin ? "bg-teal-600 text-white" : "text-gray-400 hover:text-white"
    }`}
    aria-pressed={isLogin}
  >
    Log In
  </button>
  <button
    onClick={() => setIsLogin(false)}
    className={`px-4 py-2 font-semibold rounded ${
      !isLogin ? "bg-teal-600 text-white" : "text-gray-400 hover:text-white"
    }`}
    aria-pressed={!isLogin}
  >
    Register
  </button>
</div>

{/* Show login or register form */}
{isLogin ? (
  <Form {...loginForm}>
    <form
      onSubmit={loginForm.handleSubmit(handleEmailLogin)}
      className="space-y-4"
      noValidate
    >
      {/* email, password fields here, same as before */}
      ...
      <Button
        type="submit"
        disabled={isLoading}
        aria-label="Sign in with email and password"
      >
        <Mail className="w-5 h-5 mr-3" aria-hidden="true" />
        {isLoading ? "Signing in..." : "Sign In"}
      </Button>
    </form>
  </Form>
) : (
  <Form {...registerForm}>
    <form
      onSubmit={registerForm.handleSubmit(handleEmailRegister)}
      className="space-y-4"
      noValidate
    >
      {/* firstName, lastName */}
      <FormField
        control={registerForm.control}
        name="firstName"
        render={({ field }) => (
          <FormItem>
            <FormLabel className="text-sm font-medium text-gray-300">
              First Name
            </FormLabel>
            <FormControl>
              <Input
                placeholder="Enter your first name"
                className="bg-gray-800 border-gray-600 text-white placeholder-gray-400 focus:border-teal-500 focus:ring-teal-500"
                {...field}
              />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
      <FormField
        control={registerForm.control}
        name="lastName"
        render={({ field }) => (
          <FormItem>
            <FormLabel className="text-sm font-medium text-gray-300">
              Last Name
            </FormLabel>
            <FormControl>
              <Input
                placeholder="Enter your last name"
                className="bg-gray-800 border-gray-600 text-white placeholder-gray-400 focus:border-teal-500 focus:ring-teal-500"
                {...field}
              />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />

      {/* email */}
      <FormField
        control={registerForm.control}
        name="email"
        render={({ field }) => (
          <FormItem>
            <FormLabel className="text-sm font-medium text-gray-300">
              Email
            </FormLabel>
            <FormControl>
              <Input
                type="email"
                placeholder="Enter your email"
                className="bg-gray-800 border-gray-600 text-white placeholder-gray-400 focus:border-teal-500 focus:ring-teal-500"
                {...field}
              />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />

      {/* password */}
      <FormField
        control={registerForm.control}
        name="password"
        render={({ field }) => (
          <FormItem>
            <FormLabel className="text-sm font-medium text-gray-300">
              Password
            </FormLabel>
            <FormControl>
              <div className="relative">
                <Input
                  type={showPassword ? "text" : "password"}
                  placeholder="Enter your password"
                  className="bg-gray-800 border-gray-600 text-white placeholder-gray-400 focus:border-teal-500 focus:ring-teal-500 pr-10"
                  {...field}
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-300 hover:scale-110 transition-all duration-200"
                  aria-label={showPassword ? "Hide password" : "Show password"}
                >
                  {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                </button>
              </div>
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />

      {/* confirmPassword */}
      <FormField
        control={registerForm.control}
        name="confirmPassword"
        render={({ field }) => (
          <FormItem>
            <FormLabel className="text-sm font-medium text-gray-300">
              Confirm Password
            </FormLabel>
            <FormControl>
              <div className="relative">
                <Input
                  type={showConfirmPassword ? "text" : "password"}
                  placeholder="Confirm your password"
                  className="bg-gray-800 border-gray-600 text-white placeholder-gray-400 focus:border-teal-500 focus:ring-teal-500 pr-10"
                  {...field}
                />
                <button
                  type="button"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-300 hover:scale-110 transition-all duration-200"
                  aria-label={showConfirmPassword ? "Hide password" : "Show password"}
                >
                  {showConfirmPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                </button>
              </div>
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />

      <Button
        type="submit"
        disabled={isLoading}
        aria-label="Register new account"
        className="w-full bg-gradient-to-r from-teal-600 to-cyan-600 hover:from-teal-700 hover:to-cyan-700 text-white py-3 text-base font-semibold transition-all duration-200 hover:scale-105 hover:shadow-lg"
      >
        <Users className="w-5 h-5 mr-3" aria-hidden="true" />
        {isLoading ? "Creating account..." : "Register"}
      </Button>
    </form>
  </Form>
)}
Update the footer link to toggle instead of navigating:

tsx
Copy
Edit
<footer className="mt-6 pt-4 border-t border-gray-700">
  <p className="text-center text-sm text-gray-400">
    {isLogin ? (
      <>
        New to BingeBoard?{" "}
        <button
          onClick={() => setIsLogin(false)}
          className="text-teal-400 hover:text-teal-300 font-medium underline transition-colors duration-200"
          type="button"
        >
          Create an account
        </button>
      </>
    ) : (
      <>
        Already have an account?{" "}
        <button
          onClick={() => setIsLogin(true)}
          className="text-teal-400 hover:text-teal-300 font-medium underline transition-colors duration-200"
          type="button"
        >
          Log in
        </button>
      </>
    )}
  </p>
</footer>
This way your users can switch between login and registration forms on the same page seamlessly.