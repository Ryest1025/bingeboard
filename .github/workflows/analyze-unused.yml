name: Analyze Unused Code

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  analyze-unused:
    name: Run unused exports & dependency analysis (Node 20)
    runs-on: ubuntu-latest
    concurrency:
      group: analyze-unused-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unused code analysis
        id: analyze
        run: |
          chmod +x ./scripts/analyze-unused.sh
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            export STRICT_MAIN_NO_WARN=1
          fi
          set +e
          ./scripts/analyze-unused.sh
          EXIT_CODE=$?
          set -e
          echo "Analyzer raw exit code: $EXIT_CODE"
          case "$EXIT_CODE" in
            0) STATUS=PASS ;;
            1) STATUS=FAIL ;;
            2) STATUS=WARN ;;
            *) STATUS=FAIL ;;
          esac
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
          # Print head of report for quick visibility
          if ls analysis/report-*.md >/dev/null 2>&1; then
            echo '--- report head (first 40 lines) ---'
            head -n 40 $(ls -1 analysis/report-*.md | head -n1)
          fi
          # Fail immediately on FAIL status
          if [ "$STATUS" = "FAIL" ]; then
            echo "Failing workflow (authoritative Node version)." >&2
            exit 1
          fi
          # Do not fail on WARN; WARN just surfaces in outputs.

      - name: Debug unused export diffs (on WARN/FAIL)
        if: steps.analyze.outputs.status != 'PASS'
        run: |
          echo '--- New unused exports (first 120 lines or fewer) ---'
          if [ -f /tmp/ts-prune-new.txt ] && [ -s /tmp/ts-prune-new.txt ]; then head -n 120 /tmp/ts-prune-new.txt; else echo 'None.'; fi
          echo '--- Removed unused exports (first 120 lines or fewer) ---'
          if [ -f /tmp/ts-prune-removed.txt ] && [ -s /tmp/ts-prune-removed.txt ]; then head -n 120 /tmp/ts-prune-removed.txt; else echo 'None.'; fi
          echo '--- Unused dependency diffs ---'
          if [ -f /tmp/dep-new.txt ] && [ -s /tmp/dep-new.txt ]; then echo 'New deps:'; cat /tmp/dep-new.txt; else echo 'No new deps.'; fi
          if [ -f /tmp/dep-removed.txt ] && [ -s /tmp/dep-removed.txt ]; then echo 'Removed deps:'; cat /tmp/dep-removed.txt; else echo 'No removed deps.'; fi

      - name: Upload analysis reports
        uses: actions/upload-artifact@v4
        with:
          name: unused-code-reports
          path: analysis/report-*.md

      - name: Print summary snippet
        run: |
          echo '--- analyzer summary (summary-latest.txt) ---'
          if [ -f analysis/summary-latest.txt ]; then cat analysis/summary-latest.txt; else echo 'No summary file'; fi

      - name: Upload summary snippet artifact
        uses: actions/upload-artifact@v4
        with:
          name: unused-code-summary
          path: analysis/summary-latest.txt
          if-no-files-found: warn

      - name: Append summary to job summary
        run: |
          echo "## Unused Code Analysis" >> $GITHUB_STEP_SUMMARY
          if [ -f analysis/summary-latest.txt ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            cat analysis/summary-latest.txt >> $GITHUB_STEP_SUMMARY
          else
            echo "No summary file generated." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Build inline summary (best-effort)
        if: github.event_name == 'pull_request'
        id: summary
        run: |
          REPORT_FILE=$(ls -1 analysis/report-*.md 2>/dev/null | head -n1 || true)
          if [ -z "$REPORT_FILE" ]; then
            echo "report_body=No report markdown generated." >> $GITHUB_OUTPUT
            exit 0
          fi
            awk 'NR==1, /^$/ {print}' "$REPORT_FILE" | head -n 40 > /tmp/summary.md
          ESCAPED=$(sed 's/`/\\`/g' /tmp/summary.md)
          echo "report_body<<'EOF'" >> $GITHUB_OUTPUT
          echo "$ESCAPED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          if [ -f analysis/summary-latest.txt ]; then
            SECOND=$(sed 's/`/\\`/g' analysis/summary-latest.txt | head -n 60)
            echo "report_delta<<'EOF'" >> $GITHUB_OUTPUT
            echo "$SECOND" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "report_delta=No diff summary available." >> $GITHUB_OUTPUT
          fi
          echo "analyze_status=${{ steps.analyze.outputs.status }}" >> $GITHUB_OUTPUT

      - name: Comment on PR with analysis report summary
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### Unused Code Analysis Report
            Results for Node.js version: 20.

            Overall status: ${{ steps.analyze.outputs.status }}

            <details><summary>Summary (first report excerpt)</summary>

            ${{ steps.summary.outputs.report_body }}

            </details>

            <details><summary>Unused Export & Dependency Delta vs Baseline</summary>

            ${{ steps.summary.outputs.report_delta }}

            </details>

            Full reports are available as workflow artifacts (unused-code-reports & unused-code-summary). If new unused exports or dependencies were introduced, this PR should adjust code or intentionally update the baseline.

            Exit code legend: PASS=0 WARN=2 FAIL=1.
