name: Deploy Frontend to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  build:
    name: Build static frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies (verbose with version info)
        run: |
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"
          npm ci

      - name: Create .env (Firebase config injected as Vite vars)
        run: |
          set -e
          echo "VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY }}" >> .env
          echo "VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}" >> .env
          echo "VITE_FIREBASE_PROJECT_ID=${{ secrets.VITE_FIREBASE_PROJECT_ID }}" >> .env
          echo "VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}" >> .env
          echo "VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}" >> .env
          echo "VITE_FIREBASE_APP_ID=${{ secrets.VITE_FIREBASE_APP_ID }}" >> .env
          echo "VITE_FIREBASE_MEASUREMENT_ID=${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}" >> .env
          # Do not print values (avoid leaking secrets)
          echo "Created .env with $(grep -c '^VITE_FIREBASE_' .env) Firebase Vite vars"

      - name: Build project (frontend only via vite)
        run: |
          npm run build:pages
          echo "✅ Build completed successfully"

      - name: Ensure required files for GitHub Pages
        run: |
          # Ensure build output directory exists
          if [ ! -d client/dist ]; then
            echo "❌ Build output directory client/dist not found!"
            ls -la client/ || echo "client directory doesn't exist"
            exit 1
          fi
          
          # Create CNAME file for custom domain
          echo "bingeboardapp.com" > client/dist/CNAME
          echo "✅ Created CNAME file for custom domain"
          
          # Add .nojekyll file to disable Jekyll processing
          touch client/dist/.nojekyll
          echo "✅ Created .nojekyll file"
          
          # Verify all files are in place
          echo "📁 Build output contents:"
          ls -la client/dist/ | head -20

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: client/dist

      - name: Debug build failure (if any)
        if: failure()
        run: |
          echo "Build failed; listing dist directory (if created)" || true
          ls -Ral dist || true
          echo '--- Recent npm debug logs (if any) ---'
          ls -1 /home/runner/.npm/_logs || true

  deploy:
    name: Deploy to GitHub Pages
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}
    steps:
      - name: Deploy
        id: deploy
        uses: actions/deploy-pages@v4
        with:
          timeout: 600000
