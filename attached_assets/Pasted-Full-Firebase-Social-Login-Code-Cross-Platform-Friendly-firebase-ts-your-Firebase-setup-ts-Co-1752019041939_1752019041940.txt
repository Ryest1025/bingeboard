Full Firebase Social Login Code (Cross-Platform Friendly)
📁 firebase.ts (your Firebase setup)
ts
Copy
Edit
// firebase.ts
import { initializeApp } from "firebase/app";
import { getAuth, GoogleAuthProvider } from "firebase/auth";

const firebaseConfig = {
  apiKey: "YOUR_API_KEY",
  authDomain: "YOUR_PROJECT.firebaseapp.com",
  projectId: "YOUR_PROJECT_ID",
  storageBucket: "YOUR_PROJECT.appspot.com",
  messagingSenderId: "YOUR_MSG_ID",
  appId: "YOUR_APP_ID"
};

const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const googleProvider = new GoogleAuthProvider();

export { auth, googleProvider };
✅ Replace the config with your Firebase keys
✅ Enable Google in Firebase Console > Auth > Sign-in method

📁 SignIn.tsx (or component handling login)
tsx
Copy
Edit
// SignIn.tsx
import { useEffect } from "react";
import { signInWithRedirect, signInWithPopup, getRedirectResult } from "firebase/auth";
import { auth, googleProvider } from "./firebase";

function isMobile() {
  return /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
}

export default function SignIn() {
  useEffect(() => {
    getRedirectResult(auth)
      .then((result) => {
        if (result?.user) {
          console.log("✅ Redirect login successful", result.user);
          // navigate or update state here
        }
      })
      .catch((error) => {
        console.error("❌ Redirect failed:", error);
      });
  }, []);

  const handleGoogleLogin = () => {
    if (isMobile()) {
      signInWithRedirect(auth, googleProvider);
    } else {
      signInWithPopup(auth, googleProvider)
        .then((result) => {
          console.log("✅ Popup login successful", result.user);
        })
        .catch((error) => {
          console.error("❌ Popup login failed:", error);
        });
    }
  };

  return (
    <button onClick={handleGoogleLogin}>
      Sign in with Google
    </button>
  );
}
✅ Important Firebase Console Settings
Auth → Sign-in method → Google → Enable

Auth → Authorized domains → Add:

localhost

*.replit.dev (your custom domain)

127.0.0.1 if testing locally

🧪 Test flow:
Device	Method Used
Desktop	signInWithPopup
Mobile Web	signInWithRedirect + getRedirectResult()

This works on:

Replit dev links

Mobile browsers

Inside a Capacitor app (with optional deep linking)

