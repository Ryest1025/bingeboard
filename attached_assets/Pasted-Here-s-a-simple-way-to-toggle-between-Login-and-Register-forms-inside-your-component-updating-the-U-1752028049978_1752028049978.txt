Hereâ€™s a simple way to toggle between Login and Register forms inside your component, updating the UI and handlers accordingly:

tsx
Copy
Edit
{/* Toggle buttons */}
<div className="flex justify-center mb-6 space-x-4">
  <button
    onClick={() => setIsLogin(true)}
    className={`px-4 py-2 font-semibold rounded ${isLogin ? "bg-teal-600 text-white" : "text-gray-400 hover:text-white"}`}
    aria-pressed={isLogin}
    type="button"
  >
    Log In
  </button>
  <button
    onClick={() => setIsLogin(false)}
    className={`px-4 py-2 font-semibold rounded ${!isLogin ? "bg-teal-600 text-white" : "text-gray-400 hover:text-white"}`}
    aria-pressed={!isLogin}
    type="button"
  >
    Register
  </button>
</div>

{/* Conditional rendering of forms */}
{isLogin ? (
  <Form {...loginForm}>
    <form onSubmit={loginForm.handleSubmit(handleEmailLogin)} className="space-y-4" noValidate>
      {/* Login form fields */}
      {/* ... your existing login email and password fields */}
      <Button type="submit" disabled={isLoading} aria-label="Sign in with email and password" className="w-full ...">
        <Mail className="w-5 h-5 mr-3" aria-hidden="true" />
        {isLoading ? "Signing in..." : "Sign In"}
      </Button>
    </form>
  </Form>
) : (
  <Form {...registerForm}>
    <form onSubmit={registerForm.handleSubmit(handleEmailRegister)} className="space-y-4" noValidate>
      {/* First Name */}
      <FormField
        control={registerForm.control}
        name="firstName"
        render={({ field }) => (
          <FormItem>
            <FormLabel>First Name</FormLabel>
            <FormControl>
              <Input placeholder="Enter your first name" {...field} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
      {/* Last Name */}
      <FormField
        control={registerForm.control}
        name="lastName"
        render={({ field }) => (
          <FormItem>
            <FormLabel>Last Name</FormLabel>
            <FormControl>
              <Input placeholder="Enter your last name" {...field} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
      {/* Email */}
      {/* Password with show/hide toggle (reuse your password toggle code) */}
      {/* Confirm Password with show/hide toggle */}
      {/* Submit Button */}
      <Button type="submit" disabled={isLoading} aria-label="Register new account" className="w-full ...">
        <Users className="w-5 h-5 mr-3" aria-hidden="true" />
        {isLoading ? "Creating account..." : "Register"}
      </Button>
    </form>
  </Form>
)}

{/* Footer toggle link */}
<footer className="mt-6 pt-4 border-t border-gray-700 text-center text-sm text-gray-400">
  {isLogin ? (
    <>New to BingeBoard?{" "}
      <button
        type="button"
        onClick={() => setIsLogin(false)}
        className="text-teal-400 hover:text-teal-300 font-medium underline"
      >
        Create an account
      </button>
    </>
  ) : (
    <>Already have an account?{" "}
      <button
        type="button"
        onClick={() => setIsLogin(true)}
        className="text-teal-400 hover:text-teal-300 font-medium underline"
      >
        Log in
      </button>
    </>
  )}
</footer>
This approach keeps the page single and clean, letting users switch between login and register forms seamlessly. If you want, I can help fill in the full register form fields with your password show/hide toggles or handle inline errors too!