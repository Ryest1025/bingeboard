import React, { useEffect, useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import { useLocalStorage } from "@/hooks/useLocalStorage";

interface FilterValues {
  genres: string[];
  platforms: string[];
  countries: string[];
  sports: string[];
}

interface Props {
  persistKey?: string;
  showAdvanced?: boolean;
  defaultExpanded?: boolean;
  onFiltersChange?: (filters: FilterValues) => void;
  onApply?: (filters: FilterValues) => void;
  className?: string;
}

export default function EnhancedFilterSystem({ 
  persistKey = "filters", 
  showAdvanced = false, 
  defaultExpanded = false,
  onFiltersChange, 
  onApply,
  className = ""
}: Props) {
  const [localFilters, setLocalFilters] = useLocalStorage<FilterValues>(persistKey, {
    genres: [],
    platforms: [],
    countries: [],
    sports: []
  });

  const { data: genres } = useQuery({
    queryKey: ["genres"],
    queryFn: async () => {
      const res = await fetch("/api/filters/genres");
      return res.json();
    }
  });

  const { data: platforms } = useQuery({
    queryKey: ["platforms"],
    queryFn: async () => {
      const res = await fetch("/api/filters/platforms");
      return res.json();
    }
  });

  const { data: countries } = useQuery({
    queryKey: ["countries"],
    queryFn: async () => {
      const res = await fetch("/api/filters/countries");
      return res.json();
    }
  });

  const { data: sports } = useQuery({
    queryKey: ["sports"],
    queryFn: async () => {
      const res = await fetch("/api/filters/sports");
      return res.json();
    }
  });

  useEffect(() => {
    onFiltersChange(localFilters);
  }, [localFilters]);

  const toggle = (key: keyof Filters, value: string) => {
    setLocalFilters((prev) => {
      const next = prev[key].includes(value)
        ? prev[key].filter((v) => v !== value)
        : [...prev[key], value];
      return { ...prev, [key]: next };
    });
  };

  return (
    <Card className="bg-slate-900 text-white border-slate-700/50">
      <CardHeader>
        <CardTitle>Enhanced Filters</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div>
          <p className="text-sm mb-2 text-gray-400">Genres</p>
          <div className="flex flex-wrap gap-2">
            {genres?.map((g: any) => (
              <Button
                key={g.id}
                variant={filters.genre.includes(g.name) ? "default" : "outline"}
                className="text-xs"
                onClick={() => toggle("genre", g.name)}
              >
                {g.name}
              </Button>
            ))}
          </div>
        </div>

        <div>
          <p className="text-sm mb-2 text-gray-400">Platforms</p>
          <div className="flex flex-wrap gap-2">
            {platforms?.map((p: any) => (
              <Button
                key={p.id}
                variant={filters.platform.includes(p.name) ? "default" : "outline"}
                className="text-xs"
                onClick={() => toggle("platform", p.name)}
              >
                {p.name}
              </Button>
            ))}
          </div>
        </div>

        <div>
          <p className="text-sm mb-2 text-gray-400">Country</p>
          <div className="flex flex-wrap gap-2">
            {countries?.map((c: any) => (
              <Button
                key={c.code}
                variant={filters.country.includes(c.code) ? "default" : "outline"}
                className="text-xs"
                onClick={() => toggle("country", c.code)}
              >
                {c.name}
              </Button>
            ))}
          </div>
        </div>

        <div>
          <p className="text-sm mb-2 text-gray-400">Sport</p>
          <div className="flex flex-wrap gap-2">
            {sports?.map((s: any) => (
              <Button
                key={s.id}
                variant={filters.sport.includes(s.name) ? "default" : "outline"}
                className="text-xs"
                onClick={() => toggle("sport", s.name)}
              >
                {s.name}
              </Button>
            ))}
          </div>
        </div>

        {onApply && (
          <div className="pt-4">
            <Button onClick={() => onApply(localFilters)} className="w-full bg-teal-600 hover:bg-teal-700">
              Apply Filters
            </Button>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
