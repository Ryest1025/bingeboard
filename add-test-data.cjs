#!/usr/bin/env node

const fetch = require('node-fetch');
const path = require('path');
const fs = require('fs');

// Parse CLI args
const args = process.argv.slice(2);
const env = args.includes('--env') ? args[args.indexOf('--env') + 1] : 'local';
const BASE_URL = env === 'local' ? 'http://localhost:3000' : process.env.BASE_URL;

const authToken = `mock-token-for-${env}-env-${Date.now()}-${Math.random().toString(36).substring(2, 12)}`;

const headers = {
  'Content-Type': 'application/json',
  'Authorization': `Bearer ${authToken}`
};

const tvShows = [
  {
    tmdbId: 1399,
    title: "Game of Thrones",
    overview: "Seven noble families fight for control of Westeros.",
    posterPath: "/1XS1oqL89opfnbLl8WnZY1O1uJx.jpg",
    numberOfSeasons: 8,
    numberOfEpisodes: 73,
    status: "Ended",
    rating: "8.5"
  },
  {
    tmdbId: 1396,
    title: "Breaking Bad",
    overview: "A high school chemistry teacher turned meth producer.",
    posterPath: "/3xnWaLQjelJDDF7LT1WBo6f4BRe.jpg",
    numberOfSeasons: 5,
    numberOfEpisodes: 62,
    status: "Ended",
    rating: "9.5"
  },
  {
    tmdbId: 46952,
    title: "The Boys",
    overview: "A group of vigilantes set out to take down corrupt superheroes.",
    posterPath: "/stTEycfG9928HYGEISBFaG1ngjM.jpg",
    numberOfSeasons: 4,
    numberOfEpisodes: 32,
    status: "Returning Series",
    rating: "8.7"
  },
  {
    tmdbId: 82856,
    title: "The Mandalorian",
    overview: "The travels of a lone bounty hunter in the outer reaches of the galaxy.",
    posterPath: "/sWgBv7LV2PRoQgkxwlibdGXKz1S.jpg",
    numberOfSeasons: 3,
    numberOfEpisodes: 24,
    status: "Returning Series",
    rating: "8.5"
  }
];

const movies = [
  {
    tmdbId: 27205,
    title: "Inception",
    overview: "A thief who steals corporate secrets through dreams.",
    posterPath: "/qmDpIHrmpJINaRKAfWQfftjCdyi.jpg",
    status: "Released",
    rating: "8.8",
    showMediaType: "movie"
  },
  {
    tmdbId: 157336,
    title: "Interstellar",
    overview: "A team of explorers travel through a wormhole in space.",
    posterPath: "/gEU2QniE6E77NI6lCU6MxlNBvIx.jpg",
    status: "Released",
    rating: "8.6",
    showMediaType: "movie"
  }
];

const customList = {
  name: "Test List - Must Watch",
  description: "Auto-generated list for testing",
  is_public: 1,
  is_collaborative: 0,
  tags: JSON.stringify(["test", "tv", "drama"])
};

async function post(endpoint, data) {
  const res = await fetch(`${BASE_URL}${endpoint}`, {
    method: 'POST',
    headers,
    body: JSON.stringify(data)
  });

  if (!res.ok) {
    const text = await res.text();
    throw new Error(`POST ${endpoint} failed: ${res.status} - ${text}`);
  }

  return res.json();
}

async function seedShowsAndMovies() {
  const createdShows = [];

  for (const show of [...tvShows, ...movies]) {
    try {
      const showData = await post('/api/shows', show);
      console.log(`📺 Added: ${show.title}`);
      createdShows.push(showData);

      await post('/api/watchlist', {
        showId: showData.id,
        status: "watching",
        currentSeason: 1,
        currentEpisode: Math.floor(Math.random() * 10) + 1,
        totalEpisodesWatched: Math.floor(Math.random() * 20) + 5
      });

      console.log(`🎬 Added ${show.title} to watchlist ✅`);
    } catch (err) {
      console.error(`❌ Error with ${show.title}:`, err.message);
    }
  }

  return createdShows;
}

async function seedCustomList(shows) {
  try {
    const listData = await post('/api/lists', customList);
    console.log(`📄 Created list: ${listData.name}`);

    for (const show of shows) {
      await post(`/api/lists/${listData.id}/items`, {
        showId: show.id,
        notes: `Autogenerated entry for ${show.title}`
      });

      console.log(`➕ Added ${show.title} to ${listData.name}`);
    }
  } catch (err) {
    console.error(`❌ List error:`, err.message);
  }
}

async function run() {
  console.log(`🚀 Starting test data setup for env: ${env}`);
  const shows = await seedShowsAndMovies();
  await seedCustomList(shows);
  console.log('✅ Test data setup complete!');
  process.exit(0);
}

run().catch(err => {
  console.error('💥 Error during test setup:', err);
  process.exit(1);
});
